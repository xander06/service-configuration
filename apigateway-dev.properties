apigateway.property= Gateway Profile Dev
server.port=0
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.instance.instance-id=instance:${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}:


spring.cloud.config.enabled=false
#por ser el gateway  nos da casi como colocar el @enablediscoveryclient
spring.cloud.gateway.discovery.locator.enabled=true
eureka.instance.instance-id=${spring.application.name}:${random.uuid}
eureka.client.healthcheck.enabled= true
ribbon.eureka.enabled=true
#route
#spring.cloud.loadbalancer.ribbon=false
spring.cloud.gateway.routes[0].id=mscv-cursos
spring.cloud.gateway.routes[0].uri=lb://MSVC-CURSOS

#predicate
spring.cloud.gateway.routes[0].predicates[0]=Path=/cursos/**
spring.cloud.gateway.routes[1].id=mscv-usuarios
spring.cloud.gateway.routes[1].uri=lb://MSVC-USUARIOS

#predicate
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/**


#apigateway.property= Usuarios Profile Dev
server.port=0
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

#eureka.instance.instance-id=instance:${spring.application.name}:${server.port}
# Esto permite registrar varias veces el mismo servicio en Eureka teniendo varias instancias que luego el gw se encarga de hacer el balanceo. De lo contrario solo se registraria el primero
eureka.client.healthcheck.enabled= true
ribbon.eureka.enabled=true